name: Build and Deploy

# Explicitly declare permissions
permissions:
  contents: read
  pull-requests: write
  statuses: write

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
      - workflow-run
  workflow_run:
    workflows:
      - Build and Deploy
    types:
      - completed

env:
  BUILD_PATH: 'out'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true # Cancel in progress runs if a new run is started

jobs:
  build:
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit --progress=false

      - name: Build project
        run: make website

      - name: Upload static files as artifact
        id: upload-artifact
        uses: actions/upload-pages-artifact@v3
        with:
          name: github-pages
          path: ${{ env.BUILD_PATH }}

  deploy:
    if: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    needs: build
    outputs:
      cid: ${{ steps.deploy.outputs.cid }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: github-pages
          path: ${{ env.BUILD_PATH }}
          run-id: ${{ github.event.workflow_run.id }}

      - uses: ipfs/ipfs-deploy-action@v1
        name: Deploy to IPFS Mirror Providers
        id: deploy
        with:
          path-to-deploy: ${{ env.BUILD_PATH }}
          cluster-url: "/dnsaddr/ipfs-websites.collab.ipfscluster.io"
          cluster-user: ${{ secrets.CLUSTER_USER }}
          cluster-password: ${{ secrets.CLUSTER_PASSWORD }}
          storacha-key: ${{ secrets.STORACHA_KEY }}
          storacha-proof: ${{ secrets.STORACHA_PROOF }}
          #TODO pinata-jwt-token: ${{ secrets.PINATA_JWT_TOKEN }}
          github-token: ${{ github.token }}

      # TODO: right now, DNSLink is controlled by Fleek, and we use ipfs/ipfs-deploy-action for PR previews
      #- name: Update DNSLink
      #  if: false # TODO github.ref == 'refs/heads/main' # only update DNSLink for main branch
      #  uses: ipfs/dnslink-action@v0.1
      #  with:
      #    cid: ${{ steps.deploy.outputs.cid }}
      #    dnslink_domain: 'specs.ipfs.tech'
      #    cf_record_id: ${{ secrets.CF_RECORD_ID }}
      #    cf_zone_id: ${{ secrets.CF_ZONE_ID }}
      #    cf_auth_token: ${{ secrets.CF_AUTH_TOKEN }}
      #    github_token: ${{ github.token }}
      #    set_github_status: true


  gh-pages:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' # only deploy to gh-pages on push to the main branch
    runs-on: 'ubuntu-latest'
    needs: build
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source
    environment:
      name: 'github-pages'
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
